using GPdotNet.BasicTypes;
using GPdotNet.Core;
using GPdotNet.Wnd.GUI.Dialogs;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;



namespace GPdotNet.TestProject
{
    
    public partial class VisualisationTests : Form
    {
        static public string[] m_sampleChoromosem = new string[] {
            "0;2049&1:2000&2:2002&2:1002&-1:1000&-1:2002&2:1003&-1:1001&-1:",
            "0;2000&2:2002&2:1002&-1:1000&-1:2002&2:1003&-1:1001&-1:",
            "0;2000&2:2002&2:1002&-1:1000&-1:2002&2:2002&2:2025&1:1003&-1:2003&2:1003&-1:2003&2:1003&-1:1001&-1:1001&-1:",
            "0;2000&2:2002&2:1002&-1:1000&-1:2002&2:2002&2:2025&1:1001&-1:2003&2:1001&-1:2003&2:1001&-1:1002&-1:1002&-1:",
                                    "0;2048&1:2000&2:2037&1:2000&2:1000&-1:2002&2:1001&-1:1002&-1:2002&2:2012&1:2035&1:1000&-1:2001&2:2002&2:1001&-1:1002&-1:2037&1:1000&-1:",
                                    "0;2000&2:2002&2:2004&3:1000&-1:1001&-1:1000&-1:2037&1:1000&-1:2003&2:1001&-1:2037&1:2025&1:2000&2:1001&-1:2012&1:1000&-1:",
                                    "0;2000&2:2000&2:2037&1:2000&2:1007&-1:1005&-1:2003&2:1004&-1:2003&2:2002&2:1006&-1:2000&2:1002&-1:1007&-1:2002&2:2000&2:1008&-1:1009&-1:2037&1:1007&-1:2000&2:2000&2:2003&2:1007&-1:2001&2:1000&-1:1008&-1:1009&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2003&2:2000&2:2035&1:1006&-1:2000&2:1003&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:2000&2:2035&1:1006&-1:2002&2:2003&2:2002&2:1005&-1:1001&-1:2037&1:1009&-1:1003&-1:2000&2:2000&2:1008&-1:2003&2:1008&-1:1007&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:2037&1:2000&2:1001&-1:1001&-1:2000&2:2003&2:1005&-1:1006&-1:2000&2:1005&-1:1006&-1:2000&2:2000&2:2003&2:1007&-1:2001&2:1000&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:2037&1:2002&2:1004&-1:1004&-1:2000&2:2037&1:2000&2:2037&1:1000&-1:2002&2:1005&-1:1001&-1:2003&2:1008&-1:2002&2:2035&1:1006&-1:2037&1:1007&-1:2000&2:2037&1:1002&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:1005&-1:2000&2:2003&2:2000&2:1004&-1:1005&-1:1004&-1:1005&-1:2000&2:2000&2:2003&2:1007&-1:2001&2:1000&-1:1008&-1:2037&1:2000&2:1008&-1:2003&2:1002&-1:1004&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2003&2:2003&2:2000&2:2000&2:2000&2:1009&-1:1006&-1:2000&2:1003&-1:1008&-1:2035&1:1005&-1:2000&2:2002&2:1005&-1:1001&-1:2002&2:2002&2:1006&-1:1001&-1:1001&-1:2000&2:2035&1:1006&-1:1008&-1:2000&2:2000&2:1004&-1:2000&2:2037&1:2000&2:1008&-1:1002&-1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:2037&1:1001&-1:2003&2:2000&2:1009&-1:2037&1:2000&2:1004&-1:1006&-1:2001&2:1001&-1:2000&2:2035&1:1006&-1:2002&2:1003&-1:1001&-1:2000&2:2037&1:2000&2:1004&-1:1004&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2003&2:2003&2:2000&2:2000&2:1005&-1:2000&2:1006&-1:1008&-1:2035&1:1004&-1:2000&2:2035&1:2000&2:1001&-1:1005&-1:2002&2:1008&-1:1006&-1:2000&2:1007&-1:1008&-1:2000&2:2000&2:1004&-1:2000&2:2037&1:1004&-1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2035&1:1005&-1:2000&2:2000&2:2003&2:1007&-1:2001&2:1000&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2003&2:2003&2:2000&2:1008&-1:1005&-1:1005&-1:2000&2:2035&1:1006&-1:2002&2:2035&1:2000&2:1001&-1:1009&-1:1003&-1:2000&2:2037&1:2037&1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:1006&-1:2000&2:2003&2:1005&-1:1006&-1:2000&2:1005&-1:1006&-1:2000&2:2000&2:2003&2:1007&-1:2001&2:1000&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2003&2:2003&2:2000&2:2000&2:1000&-1:1005&-1:2035&1:1004&-1:2000&2:2002&2:1005&-1:1001&-1:2002&2:1008&-1:1001&-1:2000&2:2035&1:2037&1:2002&2:1005&-1:1004&-1:1008&-1:2000&2:2000&2:1004&-1:2000&2:2037&1:1004&-1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:1006&-1:2003&2:2000&2:1009&-1:2000&2:2000&2:1001&-1:1004&-1:2037&1:1005&-1:1000&-1:2000&2:2037&1:2000&2:1005&-1:1007&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:2037&1:1005&-1:2000&2:1001&-1:2003&2:2002&2:2002&2:1002&-1:1004&-1:2037&1:1004&-1:2002&2:2000&2:1008&-1:1009&-1:1001&-1:2000&2:2037&1:1002&-1:2000&2:2035&1:1006&-1:1008&-1:",
                                    "0;2000&2:1001&-1:2000&2:1005&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2003&2:2000&2:1005&-1:1007&-1:2000&2:2000&2:1001&-1:2002&2:1005&-1:1006&-1:2000&2:2035&1:1006&-1:2000&2:1001&-1:1001&-1:2000&2:2037&1:2002&2:1005&-1:1001&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2003&2:2003&2:1004&-1:1008&-1:2000&2:2037&1:2003&2:1003&-1:1001&-1:1001&-1:2000&2:2000&2:1008&-1:2000&2:1006&-1:2003&2:2003&2:1003&-1:1008&-1:2000&2:1004&-1:1000&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:1005&-1:2000&2:2003&2:2002&2:1005&-1:2000&2:1005&-1:1007&-1:2037&1:2000&2:1003&-1:1009&-1:1008&-1:2000&2:2000&2:2003&2:2037&1:2000&2:1000&-1:1002&-1:2001&2:1006&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2003&2:2003&2:2000&2:2000&2:1006&-1:2000&2:1008&-1:1006&-1:2035&1:1004&-1:2000&2:2035&1:1006&-1:2002&2:1008&-1:1005&-1:2000&2:1004&-1:1008&-1:2000&2:2000&2:1004&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2003&2:2003&2:2000&2:2037&1:1005&-1:2035&1:1004&-1:2000&2:1000&-1:2002&2:1008&-1:1001&-1:2000&2:1007&-1:1004&-1:2000&2:1005&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:1005&-1:2000&2:2003&2:2000&2:1004&-1:1005&-1:2000&2:1008&-1:2002&2:1000&-1:1006&-1:1005&-1:2000&2:2037&1:2002&2:2000&2:2037&1:1006&-1:2037&1:1004&-1:2037&1:1001&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:1005&-1:1005&-1:2000&2:2000&2:2003&2:2037&1:2000&2:1000&-1:1005&-1:2001&2:2000&2:1009&-1:1006&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:2037&1:1002&-1:2003&2:2000&2:1009&-1:2037&1:2003&2:1004&-1:1007&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:2000&2:1006&-1:1001&-1:2000&2:1005&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2003&2:2003&2:2000&2:2000&2:2000&2:1009&-1:1006&-1:2000&2:1004&-1:1008&-1:2035&1:1004&-1:2000&2:2037&1:1007&-1:2002&2:1008&-1:1001&-1:2000&2:2035&1:1006&-1:1004&-1:2000&2:2000&2:1004&-1:2000&2:2037&1:1004&-1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:1006&-1:2003&2:2000&2:1009&-1:2000&2:2000&2:1001&-1:1004&-1:2037&1:1005&-1:2000&2:2000&2:1001&-1:1007&-1:2000&2:1001&-1:2035&1:1001&-1:2000&2:2037&1:2000&2:1005&-1:1007&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:2037&1:2000&2:1001&-1:1001&-1:2000&2:2003&2:1005&-1:2000&2:2003&2:1008&-1:1007&-1:2002&2:1007&-1:1004&-1:2000&2:1005&-1:1006&-1:2000&2:2000&2:2003&2:1007&-1:2001&2:1000&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:2037&1:2000&2:1001&-1:1001&-1:2000&2:2000&2:1006&-1:1002&-1:2000&2:1007&-1:1006&-1:2000&2:2000&2:2003&2:1000&-1:2001&2:1000&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:2037&1:2000&2:1001&-1:1001&-1:2000&2:2000&2:1006&-1:1002&-1:2000&2:1007&-1:1008&-1:2000&2:2000&2:2003&2:1000&-1:2001&2:1000&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2003&2:2003&2:1006&-1:2000&2:1008&-1:1001&-1:2002&2:2002&2:1008&-1:1007&-1:2000&2:1007&-1:1004&-1:2000&2:2037&1:2035&1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:1005&-1:2000&2:2003&2:2000&2:1004&-1:1005&-1:2000&2:2003&2:1005&-1:1007&-1:1000&-1:1005&-1:2000&2:2000&2:2037&1:1001&-1:2037&1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:1005&-1:2000&2:2003&2:2002&2:1005&-1:2000&2:1005&-1:1007&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:1008&-1:2000&2:2000&2:2003&2:2037&1:2000&2:1000&-1:1005&-1:2001&2:1006&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:1001&-1:2000&2:1005&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2002&2:1008&-1:2000&2:1006&-1:1000&-1:",
                                    "0;2000&2:2003&2:2003&2:2000&2:2000&2:1001&-1:2000&2:1003&-1:1006&-1:2002&2:2000&2:1004&-1:1008&-1:1001&-1:2000&2:2035&1:1006&-1:2002&2:1008&-1:1005&-1:1009&-1:2000&2:2000&2:2037&1:2000&2:1000&-1:1005&-1:2002&2:2000&2:2002&2:1006&-1:1005&-1:1006&-1:1005&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2002&2:2000&2:2000&2:1004&-1:1007&-1:2035&1:1006&-1:2035&1:2037&1:1008&-1:2000&2:2002&2:2003&2:1001&-1:2000&2:1005&-1:2000&2:1006&-1:1005&-1:2002&2:1004&-1:1005&-1:2003&2:2037&1:1004&-1:2037&1:1008&-1:",
                                    "0;2000&2:2000&2:2037&1:2002&2:2002&2:1008&-1:1009&-1:2035&1:1006&-1:2000&2:2037&1:2000&2:2037&1:1000&-1:2002&2:1005&-1:1001&-1:2003&2:2003&2:2003&2:1007&-1:1008&-1:2000&2:1004&-1:1008&-1:2002&2:2035&1:1006&-1:2037&1:1007&-1:2000&2:2037&1:1002&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:2037&1:1001&-1:2000&2:1008&-1:1001&-1:2000&2:2000&2:1004&-1:2000&2:2037&1:1000&-1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2000&2:1009&-1:2000&2:2037&1:2000&2:1008&-1:2002&2:1000&-1:1001&-1:2003&2:2002&2:1006&-1:2037&1:1003&-1:2002&2:2000&2:1008&-1:1001&-1:1001&-1:2000&2:2037&1:1002&-1:2000&2:1004&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2003&2:2003&2:2000&2:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:1005&-1:1005&-1:2000&2:2035&1:1006&-1:2002&2:2035&1:2000&2:1001&-1:1009&-1:1003&-1:2000&2:2000&2:1008&-1:1004&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "0;2000&2:2003&2:2003&2:2000&2:2037&1:1005&-1:2035&1:1004&-1:2000&2:1000&-1:2002&2:1008&-1:1001&-1:2000&2:1007&-1:1004&-1:2000&2:1005&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:"
                    };

        //first 4 algreabric operations +,-,*,/
        public Function[] funSet = new Function[] 
        {
            new Function() { Id=2000 }, new Function() { Id=2001 },new Function() { Id=2002},new Function() { Id=2003 },
        };

        public int[] terSet = new int[] { 1000, 1001, 1002, 1003 };

        public VisualisationTests() 
        {
            InitializeComponent();
            
            this.Load += new EventHandler(VisualisationTests_Load);
        }

        void VisualisationTests_Load(object sender, EventArgs e)
        {
            comboBox1.SelectedIndex = 0;
           
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (comboBox1.SelectedIndex == -1)
                return;
            var ch = new Chromosome();
            ch.FromString(m_sampleChoromosem[comboBox1.SelectedIndex]);


            treeCtrlll1.DrawTreeExpression(ch.expressionTree, Globals.FunctionFromId);
            //next chromosome ready
            if (comboBox1.SelectedIndex == 37)
                comboBox1.SelectedIndex = 0;
            else
                comboBox1.SelectedIndex++;
         
        }
       
        private void button2_Click(object sender, EventArgs e)
        {
            treeCtrlll1.SaveAsImage();
        }
        /// <summary>
        /// SHow Chromosome for selected string item
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cmb_crossParent1_SelectedIndexChanged(object sender, EventArgs e)
        {
            var cmb = sender as ComboBox;
            if (cmb != null)
            {
                if (cmb.SelectedIndex > -1)
                {
                    var ch = new Chromosome();
                    ch.FromString(m_sampleChoromosem[cmb.SelectedIndex]);

                    if (cmb.Name == "cmb_crossParent1")
                    {
                        treeCtrlDrawer1.DrawTreeExpression(ch.expressionTree, Globals.FunctionFromId, null, VisualisationTests.SetGPNodeBackGround1);
                    }
                    else if (cmb.Name == "cmb_crossParent2")
                    {

                        treeCtrlDrawer2.DrawTreeExpression(ch.expressionTree, Globals.FunctionFromId, null, VisualisationTests.SetGPNodeBackGround2);
                    }
                    else if (cmb.Name == "cmb_mutatParent1")
                    {

                        treeCtrlDrawer5.DrawTreeExpression(ch.expressionTree, Globals.FunctionFromId, null, VisualisationTests.SetGPNodeBackGround2);
                    }
                }
            }
        }

        private void button5_Click(object sender, EventArgs e)
        {
            var ch = new Chromosome();
            ch.FromString(textBox1.Text);

            treeCtrlDrawer1.DrawTreeExpression(ch.expressionTree, Globals.FunctionFromId,null, VisualisationTests.SetGPNodeBackGround1);
           
           
        }

        /// <summary>
        /// //Perform crossover for selected node of parent1 and parent 2
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnCrossOver_Click(object sender, EventArgs e)
        {
            //check for node selection
            if (treeCtrlDrawer1.GetSelectedNode() == null)
            {
                MessageBox.Show("Select node for crossover for parent 1.");
                return;
            }
            if (treeCtrlDrawer2.GetSelectedNode() == null)
            {
                MessageBox.Show("Select node for crossover for parent 2.");
                return;
            }
            var n1 = treeCtrlDrawer1.ToGPNode(false);
            var n2 = treeCtrlDrawer2.ToGPNode(true);
            var ind1 = treeCtrlDrawer1.GetSelectedIndex();
            var ind2 = treeCtrlDrawer2.GetSelectedIndex();

            if (ind1 < 1 || ind2 < 1)
            {
                MessageBox.Show("Cannot perform operation on root node.");
                return;
            }

            var ch1 = new Chromosome();
            ch1.expressionTree = n1;
            var ch2 = new Chromosome();
            ch2.expressionTree = n2;

            Chromosome.ApplyCrossover(ch1.expressionTree,ch2.expressionTree, ind1, ind2, 20, funSet, terSet);


            treeCtrlDrawer3.DrawTreeExpression(ch1.expressionTree, Globals.FunctionFromId,null, VisualisationTests.SetGPNodeBackGround3);
            treeCtrlDrawer4.DrawTreeExpression(ch2.expressionTree, Globals.FunctionFromId,null, VisualisationTests.SetGPNodeBackGround3);
        }


        /// <summary>
        /// //Perform mutation for selected point
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button3_Click(object sender, EventArgs e)
        {
            //check for node selection
            if (treeCtrlDrawer5.GetSelectedNode() == null)
            {
                MessageBox.Show("Select node for mutation for parent 1.");
                return;
            }
            var n1 = treeCtrlDrawer5.ToGPNode(true);
            var ind1 = treeCtrlDrawer5.GetSelectedIndex();//.GetSelectedIndex();
            var ch1 = new Chromosome();
            ch1.expressionTree = n1;
            Chromosome.ApplyMutate(ch1.expressionTree,ind1,8,funSet,terSet);

            treeCtrlDrawer6.DrawTreeExpression(ch1.expressionTree, Globals.FunctionFromId, null, VisualisationTests.SetGPNodeBackGround3);

        }
        public static Brush SetGPNodeBackGround1(bool tag)
        {
            return Brushes.Blue;
        }
        public static Brush SetGPNodeBackGround2(bool tag)
        {
            return Brushes.Red;
        }
        public static Brush SetGPNodeBackGround3(bool tag)
        {
            if (tag)
                return Brushes.Red;
            else
                return Brushes.Blue;
        }

        /// <summary>
        /// randomly generate chromosome
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button4_Click(object sender, EventArgs e)
        {
            Chromosome ch = new Chromosome();

            ch.Generate(5, Generation.random, funSet, terSet, new Function() { Id = (int)numericUpDown1.Value, Arity = (int)numericUpDown2.Value });

            treeCtrlll1.DrawTreeExpression(ch.expressionTree, Globals.FunctionFromId);

            
        }

        private void button6_Click(object sender, EventArgs e)
        {
            BModelEvaluation dlg = new BModelEvaluation();
            double[] y1 = new double[6] { 0, 1, 1, 0, 1, 1 };
            double[] y2 = new double[6] { 0.103345,0.816285,0.36523,0.164645,0.988035,0.963756 };

            double[] y11 = new double[] { 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1 };
            double[] y21 = new double[] { 0.583333, 0, 1, 0.1026, 0.058482, 0.222538, 0, 0.306647, 0.05, 0.345238, 0, 0.45, 0.137926, 0.291667, 0, 1, 0.137926, 0.055871, 0, 0, 0.46875 ,0.479167, 0, 0.125, 0, 0, 0.240183, 0.270833, 0.125, 1, 0.5625,  0.1026,  1, 0.125, 0.375, 1, 0.137926, 0.240183, 0.275984, 0.5, 0.137926, 0.625, 0.5, 0.5, 0.875, 0, 0.875, 0.765625, 0.137926, 0.875, 1, 0.375, 1, 0.1026 , 0.45, 0.583333, 0.351637, 1, 0.1026, 0, 0.6875, 0.25, 0, 0.625, 0, 0.1026, 0.649777, 1, 0.202232, 0, 0, 0, 0.479167, 0.375, 0.25, 1, 0.17748, 0.125, 0.5625, 0.1026, 0.75463, 0, 0, 0, 1, 0.1026, 1, 0.458333, 0.1026, 1, 0.875, 1 };

            dlg.loadClasses(new string[]{ "FALSE","TRUE"});
            dlg.loadData(y11,y21,null,null);
          
            dlg.ShowDialog();

           

     }

        private void button7_Click(object sender, EventArgs e)
        {
            MModelEvaluation dlg = new MModelEvaluation();

            double[] y1 = new double[13] { 0, 1, 2, 1, 2, 0, 1, 0, 2, 2, 2, 0, 2 };
            double[] y2 = new double[13] { 1, 2, 0, 1, 2, 0, 1, 0, 2, 1, 2, 0, 2 };

            double[] y11 = new double[60] { 0, 0, 1, 1, 0, 2, 1, 0, 2, 1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 2, 1, 1, 0, 1, 2, 2, 1, 1, 0, 0, 1, 1, 2, 1, 0, 1, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 2, 0, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2 };
            double[] y21 = new double[60] {0,0,1,1,0,2,1,0,2,1,0,0,1,0,0,1,0,0,2,2,1,1,0,1,2,2,1,1,0,0,2,1,2,1,0,1,2,0,1,0,0,1,0,0,1,0,0,1,2,0,2,0,2,2,0,2,2,0,2,2 };


            dlg.loadClasses(new string[] { "C1", "C2", "C3" });
            dlg.loadData(y1, y2, null, null);

            dlg.ShowDialog();
        }

   
    }
}
